name: Publish snapshots and grammar files to maven

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - 1.*
      - 2.*
      - poc/commit-metadata

env:
  SNAPSHOT_REPO_URL: https://aws.oss.sonatype.org/content/repositories/snapshots/
  COMMIT_MAP_FILENAME: commit-version-map.json

jobs:
  publish-grammar-files:
    strategy:
      fail-fast: false
    if: github.repository == 'opensearch-project/sql'
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: write

    env:
      TARGET_REPO_PATH: org/opensearch/language-grammar

    steps:
      - uses: actions/setup-java@v3
        with:
          distribution: temurin # Temurin is a distribution of adoptium
          java-version: 21
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: ${{ secrets.PUBLISH_SNAPSHOTS_ROLE }}
          aws-region: us-east-1

      # Get Maven credentials
      - name: Setup publishing credentials
        id: creds
        run: |
          .github/get-sonatype-credentials.sh

      # Extract version information directly from build.gradle
      - name: Set version
        id: set_version
        run: |
          VERSION=$(grep "version = " ./language-grammar/build.gradle | cut -d "'" -f 2)
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "Using version: ${VERSION}"

      # Capture commit ID
      - name: Set commit ID
        id: set_commit
        run: |
          COMMIT_ID=$(git log -1 --format='%H')
          echo "commit_id=${COMMIT_ID}" >> $GITHUB_OUTPUT
          echo "Using commit ID: ${COMMIT_ID}"

      # Create ZIP of grammar files
      - name: Package grammar files
        run: |
          # Create directory for the zip content
          mkdir -p grammar_files
          
          # Copy all .g4 files to the directory
          find ./language-grammar/src/main/antlr4 -name "*.g4" -type f -exec cp {} grammar_files/ \;
          
          # List the files that will be included in the zip
          echo "Files to be included in the zip:"
          ls -la grammar_files/
          
          # Create zip file
          cd grammar_files
          zip -r ../grammar.zip ./*
          cd ..
          
          # Check the zip file
          ls -la grammar.zip

      - name: Prepare for Maven publishing
        run: |
          # Define constants
          ARTIFACT_ID="language-grammar"
          GROUP_ID="org.opensearch"
          VERSION="${{ steps.set_version.outputs.VERSION }}"
          
          # Create directory structure for Maven
          MAVEN_LOCAL_PATH="${HOME}/.m2/repository/${GROUP_ID//.//}/${ARTIFACT_ID}/${VERSION}"
          mkdir -p "${MAVEN_LOCAL_PATH}"
          
          # Copy the zip file to Maven directory with proper naming
          MAVEN_ZIP_NAME="${ARTIFACT_ID}-${VERSION}.zip"
          cp grammar.zip "${MAVEN_LOCAL_PATH}/${MAVEN_ZIP_NAME}"
          
          # Generate POM file
          cat > "${MAVEN_LOCAL_PATH}/${ARTIFACT_ID}-${VERSION}.pom" << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <project xmlns="http://maven.apache.org/POM/4.0.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
              <modelVersion>4.0.0</modelVersion>
              <groupId>${GROUP_ID}</groupId>
              <artifactId>${ARTIFACT_ID}</artifactId>
              <version>${VERSION}</version>
              <packaging>zip</packaging>
              <description>OpenSearch Language Grammar Files</description>
          </project>
          EOF
          
          echo "Grammar files prepared for Maven publishing as version ${VERSION}"

      # Generate checksums for the Maven artifacts
      - name: Generate checksums
        run: |
          for i in `find ${HOME}/.m2/repository/org/opensearch/ -name "*.pom" -type f`; do sha512sum "$i" | awk '{print $1}' >> "$i.sha512"; done
          for i in `find ${HOME}/.m2/repository/org/opensearch/ -name "*.zip" -type f`; do sha512sum "$i" | awk '{print $1}' >> "$i.sha512"; done
          for i in `find ${HOME}/.m2/repository/org/opensearch/ -name "*.pom" -type f`; do sha256sum "$i" | awk '{print $1}' >> "$i.sha256"; done
          for i in `find ${HOME}/.m2/repository/org/opensearch/ -name "*.zip" -type f`; do sha256sum "$i" | awk '{print $1}' >> "$i.sha256"; done

      # Checkout build libraries for publishing scripts
      - uses: actions/checkout@v4
        with:
          repository: 'opensearch-project/opensearch-build-libraries'
          path: 'build'

      # Publish to Maven
      - name: Publish to Maven
        run: |
          # Copy local Maven repo to build directory
          cd build/resources/publish/
          cp -a $HOME/.m2/repository/* ./
          
          # Run the publish script
          ./publish-snapshot.sh ./

      # Install XML and JSON tools
      - name: Install XML and JSON tools
        run: sudo apt-get update && sudo apt-get install -y xmlstarlet jq

      # Update metadata with commit ID
      - name: Add commit ID to metadata
        run: |
          COMMIT_ID="${{ steps.set_commit.outputs.commit_id }}"
          ARTIFACT_ID="language-grammar"
          VERSION="${{ steps.set_version.outputs.VERSION }}"
          
          TEMP_DIR=$(mktemp -d)
          METADATA_FILE="${TEMP_DIR}/maven-metadata.xml"
          
          # Download existing metadata
          META_URL="${SNAPSHOT_REPO_URL}org/opensearch/${ARTIFACT_ID}/${VERSION}/maven-metadata.xml"
          curl -s -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" -o "${METADATA_FILE}" "${META_URL}"
          
          if [ -s "${METADATA_FILE}" ]; then
            cp "${METADATA_FILE}" "${METADATA_FILE}.bak"
          
            # Add commit ID to metadata
            awk -v commit="${COMMIT_ID}" '
              /<versioning>/ {
                print $0
                print "  <commitId>" commit "</commitId>"
                next
              }
              {print}
            ' "${METADATA_FILE}.bak" > "${METADATA_FILE}"
          
            # Upload modified metadata
            curl -X PUT -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" --upload-file "${METADATA_FILE}" "${META_URL}"
          
            # Update checksums
            cd "${TEMP_DIR}"
            sha256sum "maven-metadata.xml" | awk '{print $1}' > "maven-metadata.xml.sha256"
            sha512sum "maven-metadata.xml" | awk '{print $1}' > "maven-metadata.xml.sha512"
          
            curl -X PUT -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" --upload-file "maven-metadata.xml.sha256" "${META_URL}.sha256"
            curl -X PUT -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" --upload-file "maven-metadata.xml.sha512" "${META_URL}.sha512"
          
            echo "Version metadata updated with commit ID"
          else
            echo "Failed to download metadata, skipping commit ID addition"
          fi
          
          rm -rf "${TEMP_DIR}"

      # Add commit-version mapping
      - name: Update commit-version mapping
        run: |
          COMMIT_ID="${{ steps.set_commit.outputs.commit_id }}"
          VERSION="${{ steps.set_version.outputs.VERSION }}"
          ARTIFACT_ID="language-grammar"
          
          # Create temp directory for work
          MAPPING_DIR=$(mktemp -d)
          MAPPING_FILE="${MAPPING_DIR}/${COMMIT_MAP_FILENAME}"
          
          # Try to extract the actual ZIP version from metadata
          TEMP_METADATA=$(mktemp)
          META_URL="${SNAPSHOT_REPO_URL}org/opensearch/${ARTIFACT_ID}/${VERSION}/maven-metadata.xml"
          curl -s -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" -o "${TEMP_METADATA}" "${META_URL}"
          
          # Extract the latest ZIP version from metadata
          ZIP_VERSION=""
          if [ -s "${TEMP_METADATA}" ]; then
            # Extract the latest ZIP version with xmlstarlet
            ZIP_VERSION=$(xmlstarlet sel -t -v "//snapshotVersion[extension='zip' and not(classifier)]/value" "${TEMP_METADATA}" | head -1)
            echo "Latest ZIP version for ${ARTIFACT_ID}: ${ZIP_VERSION}"
          else
            echo "Warning: Could not find ZIP version in metadata for ${ARTIFACT_ID}"
            ZIP_VERSION="${VERSION}"
          fi
          
          # Try to download existing mapping file
          MAPPING_URL="${SNAPSHOT_REPO_URL}org/opensearch/${COMMIT_MAP_FILENAME}"
          HTTP_CODE=$(curl -s -o "${MAPPING_FILE}" -w "%{http_code}" -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" "${MAPPING_URL}" || echo "000")
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "Downloaded existing mapping file"
          else
            echo "No existing mapping file found, creating new one"
            echo '{"mappings":[]}' > "${MAPPING_FILE}"
          fi
          
          # Create artifacts JSON object
          ARTIFACTS_JSON="{\"${ARTIFACT_ID}\": \"${ZIP_VERSION}\"}"
          
          # Add new mapping entry
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          # Use temporary file for JSON manipulation
          TEMP_JSON="${MAPPING_DIR}/temp.json"
          
          # Use jq to add the new mapping
          cat "${MAPPING_FILE}" | jq --arg commit "$COMMIT_ID" \
                                    --arg version "$VERSION" \
                                    --arg timestamp "$TIMESTAMP" \
                                    --argjson artifacts "$ARTIFACTS_JSON" '
          if (.mappings | map(select(.commit_id == $commit)) | length) == 0 then
            .mappings += [{"commit_id": $commit, "version": $version, "timestamp": $timestamp, "artifacts": $artifacts}]
          else
            .mappings = [.mappings[] | if .commit_id == $commit then . + {"artifacts": $artifacts} else . end]
          end
          ' > "${TEMP_JSON}"
          
          mv "${TEMP_JSON}" "${MAPPING_FILE}"
          
          # Sort mappings by timestamp (newest first)
          cat "${MAPPING_FILE}" | jq '.mappings |= sort_by(.timestamp) | .mappings |= reverse' > "${TEMP_JSON}"
          mv "${TEMP_JSON}" "${MAPPING_FILE}"
          
          # Print the updated mapping
          echo "Updated mapping file content:"
          cat "${MAPPING_FILE}"
          
          # Upload the mapping file
          echo "Uploading mapping file to ${MAPPING_URL}"
          curl -v -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" --upload-file "${MAPPING_FILE}" "${MAPPING_URL}"
          
          # Clean up
          rm -rf "${MAPPING_DIR}" "${TEMP_METADATA}"

  publish-async-query-core:
    strategy:
      fail-fast: false
    if: github.repository == 'opensearch-project/sql'
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: write

    steps:
      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: ${{ secrets.PUBLISH_SNAPSHOTS_ROLE }}
          aws-region: us-east-1

      # Get and mask credentials once in a dedicated step
      - name: Setup publishing credentials
        id: creds
        run: |
          .github/get-sonatype-credentials.sh

      # Capture the commit ID for metadata purposes
      - name: Set commit ID
        id: set_commit
        run: |
          COMMIT_ID=$(git log -1 --format='%H')
          echo "commit_id=${COMMIT_ID}" >> $GITHUB_OUTPUT
          echo "Using commit ID: ${COMMIT_ID}"

      # Extract version from build.gradle
      - name: Extract version from build.gradle
        id: extract_version
        run: |
          # Extract the version directly from the build.gradle file
          VERSION=$(grep -m 1 "archiveVersion.set" ./async-query-core/build.gradle | sed -n "s/.*archiveVersion.set('\([^']*\)').*/\1/p")
          
          # Add -SNAPSHOT suffix for snapshot repository if not already present
          if [[ ! $VERSION == *-SNAPSHOT ]]; then
            VERSION="${VERSION}-SNAPSHOT"
          fi
          
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Build and publish shadow JAR
        run: |
          # Build the shadow JAR
          ./gradlew :async-query-core:shadowJar
          
          # Define constants
          ARTIFACT_ID="async-query-core" 
          GROUP_PATH="org/opensearch"
          VERSION="${{ steps.extract_version.outputs.VERSION }}"
          
          # Find the generated shadow JAR
          SHADOW_JAR=$(find ./async-query-core/build/libs/ -name "*-all.jar" | head -n 1)
          
          if [ -z "$SHADOW_JAR" ]; then
            echo "Error: Shadow JAR not found!"
            exit 1
          fi
          
          # Create directory structure in local Maven repository
          MAVEN_LOCAL_PATH="${HOME}/.m2/repository/${GROUP_PATH}/${ARTIFACT_ID}/${VERSION}"
          mkdir -p "${MAVEN_LOCAL_PATH}"
          
          # Copy the shadow JAR to the local Maven repository with proper naming
          MAVEN_JAR_NAME="${ARTIFACT_ID}-${VERSION}.jar"
          cp "${SHADOW_JAR}" "${MAVEN_LOCAL_PATH}/${MAVEN_JAR_NAME}"
          
          # Generate a POM file
          cat > "${MAVEN_LOCAL_PATH}/${ARTIFACT_ID}-${VERSION}.pom" << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <project xmlns="http://maven.apache.org/POM/4.0.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
              <modelVersion>4.0.0</modelVersion>
              <groupId>org.opensearch</groupId>
              <artifactId>${ARTIFACT_ID}</artifactId>
              <version>${VERSION}</version>
          </project>
          EOF
          
          echo "Shadow JAR and POM published to local Maven repository for version ${VERSION}"

      # Checkout opensearch-build-libraries repository for publishing scripts
      - uses: actions/checkout@v4
        with:
          repository: 'opensearch-project/opensearch-build-libraries'
          path: 'build'

      - name: Generate SHA checksums for JAR and POM files
        run: |
          for i in `find ${HOME}/.m2/repository/org/opensearch/ -name "*.pom" -type f`; do sha512sum "$i" | awk '{print $1}' >> "$i.sha512"; done
          for i in `find ${HOME}/.m2/repository/org/opensearch/ -name "*.jar" -type f`; do sha512sum "$i" | awk '{print $1}' >> "$i.sha512"; done
          for i in `find ${HOME}/.m2/repository/org/opensearch/ -name "*.pom" -type f`; do sha256sum "$i" | awk '{print $1}' >> "$i.sha256"; done
          for i in `find ${HOME}/.m2/repository/org/opensearch/ -name "*.jar" -type f`; do sha256sum "$i" | awk '{print $1}' >> "$i.sha256"; done

      # Install XML and JSON tools
      - name: Install XML and JSON tools
        run: sudo apt-get update && sudo apt-get install -y xmlstarlet jq

      - name: Publish snapshots to maven
        run: |
          # Publish snapshots to maven
          cd build/resources/publish/
          cp -a $HOME/.m2/repository/* ./
          ./publish-snapshot.sh ./

      - name: Update version metadata with commit ID
        run: |
          COMMIT_ID="${{ steps.set_commit.outputs.commit_id }}"
          ARTIFACT_ID="async-query-core"  
          VERSION="${{ steps.extract_version.outputs.VERSION }}"

          # Add commit ID to version-specific metadata file
          echo "Processing commit ID for version: ${VERSION}"

          TEMP_DIR=$(mktemp -d)
          METADATA_FILE="${TEMP_DIR}/maven-metadata.xml"

          # Download metadata from repository
          META_URL="${SNAPSHOT_REPO_URL}org/opensearch/${ARTIFACT_ID}/${VERSION}/maven-metadata.xml"
          echo "Downloading metadata from ${META_URL}"

          # Try to download the metadata file
          curl -s -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" -o "${METADATA_FILE}" "${META_URL}"

          # If successful, modify and upload back
          if [ -s "${METADATA_FILE}" ]; then
            echo "Modifying metadata for ${VERSION}"
            cp "${METADATA_FILE}" "${METADATA_FILE}.bak"

            # Apply same awk command from working example
            awk -v commit="${COMMIT_ID}" '
              /<versioning>/ {
                print $0
                print "  <commitId>" commit "</commitId>"
                next
              }
              {print}
            ' "${METADATA_FILE}.bak" > "${METADATA_FILE}"

            # Upload modified file back
            echo "Uploading modified metadata to ${META_URL}"
            curl -X PUT -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" --upload-file "${METADATA_FILE}" "${META_URL}"

            # Update the SHA checksums
            cd "${TEMP_DIR}"
            sha256sum "maven-metadata.xml" | awk '{print $1}' > "maven-metadata.xml.sha256"
            sha512sum "maven-metadata.xml" | awk '{print $1}' > "maven-metadata.xml.sha512"

            # Upload the checksums
            curl -X PUT -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" --upload-file "maven-metadata.xml.sha256" "${META_URL}.sha256"
            curl -X PUT -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" --upload-file "maven-metadata.xml.sha512" "${META_URL}.sha512"
            cd -

            echo "Updated metadata and checksums for ${VERSION}"
          else
            echo "Failed to download metadata for ${VERSION} or file is empty"
            exit 1
          fi

          # Clean up
          rm -rf "${TEMP_DIR}"

          echo "Version metadata updated with commit ID"

      # Add commit-version mapping
      - name: Update commit-version mapping
        run: |
          COMMIT_ID="${{ steps.set_commit.outputs.commit_id }}"
          VERSION="${{ steps.extract_version.outputs.VERSION }}"
          ARTIFACT_ID="async-query-core"
          
          # Create temp directory for work
          MAPPING_DIR=$(mktemp -d)
          MAPPING_FILE="${MAPPING_DIR}/${COMMIT_MAP_FILENAME}"
          
          # Try to extract the actual JAR version from metadata
          TEMP_METADATA=$(mktemp)
          META_URL="${SNAPSHOT_REPO_URL}org/opensearch/${ARTIFACT_ID}/${VERSION}/maven-metadata.xml"
          curl -s -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" -o "${TEMP_METADATA}" "${META_URL}"
          
          # Extract the latest JAR version from metadata
          JAR_VERSION=""
          if [ -s "${TEMP_METADATA}" ]; then
            # Extract the latest JAR version with xmlstarlet
            JAR_VERSION=$(xmlstarlet sel -t -v "//snapshotVersion[extension='jar' and not(classifier)]/value" "${TEMP_METADATA}" | head -1)
            echo "Latest JAR version for ${ARTIFACT_ID}: ${JAR_VERSION}"
          else
            echo "Warning: Could not find JAR version in metadata for ${ARTIFACT_ID}"
            JAR_VERSION="${VERSION}"
          fi
          
          # Try to download existing mapping file
          MAPPING_URL="${SNAPSHOT_REPO_URL}org/opensearch/${COMMIT_MAP_FILENAME}"
          HTTP_CODE=$(curl -s -o "${MAPPING_FILE}" -w "%{http_code}" -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" "${MAPPING_URL}" || echo "000")
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "Downloaded existing mapping file"
          else
            echo "No existing mapping file found, creating new one"
            echo '{"mappings":[]}' > "${MAPPING_FILE}"
          fi
          
          # Create artifacts JSON object
          ARTIFACTS_JSON="{\"${ARTIFACT_ID}\": \"${JAR_VERSION}\"}"
          
          # Add new mapping entry
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          # Use temporary file for JSON manipulation
          TEMP_JSON="${MAPPING_DIR}/temp.json"
          
          # Use jq to add the new mapping or update existing one
          cat "${MAPPING_FILE}" | jq --arg commit "$COMMIT_ID" \
                                    --arg version "$VERSION" \
                                    --arg timestamp "$TIMESTAMP" \
                                    --argjson artifacts "$ARTIFACTS_JSON" '
          # Look for an existing entry with this commit ID
          if (.mappings | map(select(.commit_id == $commit)) | length) == 0 then
            # No entry exists, add a new one
            .mappings += [{"commit_id": $commit, "version": $version, "timestamp": $timestamp, "artifacts": $artifacts}]
          else
            # Update the existing entry
            .mappings = [.mappings[] | if .commit_id == $commit then 
              # Merge the artifacts objects
              . + {"timestamp": $timestamp, "artifacts": (.artifacts + $artifacts)} 
            else . end]
          end
          ' > "${TEMP_JSON}"
          
          mv "${TEMP_JSON}" "${MAPPING_FILE}"
          
          # Sort mappings by timestamp (newest first)
          cat "${MAPPING_FILE}" | jq '.mappings |= sort_by(.timestamp) | .mappings |= reverse' > "${TEMP_JSON}"
          mv "${TEMP_JSON}" "${MAPPING_FILE}"
          
          # Print the updated mapping
          echo "Updated mapping file content:"
          cat "${MAPPING_FILE}"
          
          # Upload the mapping file
          echo "Uploading mapping file to ${MAPPING_URL}"
          curl -v -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" --upload-file "${MAPPING_FILE}" "${MAPPING_URL}"
          
          # Clean up
          rm -rf "${MAPPING_DIR}" "${TEMP_METADATA}"